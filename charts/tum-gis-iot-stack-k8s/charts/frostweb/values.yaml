# -- Enable/disable FROST-Server
enabled: true
component: http-mqtt

# -- Override name
nameOverride:
# -- Override fullname
fullnameOverride: frostweb

image:
  # -- Image repository
  repository: fraunhoferiosb/frost-server
  # [Image pull policy](https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy)
  pullPolicy: IfNotPresent
   # -- Overrides the image tag whose default is the chart appVersion.
  tag: ""

# -- [Image pull secrets](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/)
imagePullSecrets: []

# -- Additional pod annotations
podAnnotations: {}

serviceAccount:
  # -- Specifies whether a service account should be created
  create: false
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  # -- Type of service for http
  type: ClusterIP
  # -- Service port for http
  port: 8080

# -- Number of replicas. Only used if autoscaling.enabled = false
replicaCount: 1
autoscaling:
  # -- Enable/disable pod autoscaling, if disabled `replicaCount` is used to set number of pods.
  enabled: false
  # -- Minimum number of replicas
  minReplicas: 1
  # -- Maximum number of replicas
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

ingress:
  # -- Enable/disable ingress
  enabled: true
  # -- Name of the [IngressClass](https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-class)
  # to use in Ingress routes.
  className: nginx
  # -- List of [FQDNs](https://de.wikipedia.org/wiki/Fully-Qualified_Host_Name) for this Ingress.
  # Note: All FQDNs will be used for Ingress hosts and TLS certificate.
  # The global setting overwrites this setting. Note: The first domain in the list will be used
  # as FROST-Server serviceRootURL and MQTT host.
  domains: []
  # -- Additional Ingress annotations
  annotations:
  # -- Make FROST-Server available at a subpath. By default FROST will be available from [DOMAIN]/
  # Don't append or prepend :// or /
  subpath: frost
  certManager:
    # -- eMail address for ACME registration with Let's Encrypt. Only used for issuerType = namespace.
    issuerEmail: me@example.com
    # -- Type of [cert-manager](https://cert-manager.io/docs/) Issuer: Use either "namespace" or "cluster".
    issuerType: namespace
    # -- Name of the Issuer to use. For certManager.type = namespace
    # `letsencrypt-staging`, `letsencrypt-prod` and `self-signed` are available.
    issuerName: letsencrypt-staging

# FROST-Server HTTP settings
# https://fraunhoferiosb.github.io/FROST-Server/settings/settings.html#http-settings
http:
  cors:
    enabled: true
    allowed_origins: "*"

# FROST-Server Persistence settings
# https://fraunhoferiosb.github.io/FROST-Server/settings/settings.html#persistence-settings
persistence:
  db:
    driver: org.postgresql.Driver
    host: frostdb
    port: 5432
    dbname: frost
    auth:
      username: postgres
      password: changeMe
  autoUpdateDatabase: true
  queryTimeout: 0
  countMode: "LIMIT_SAMPLE"
  countEstimateThreshold: 10000
  idGenerationMode: ServerGeneratedOnly
  slowQueryThreshold: 200

# FROST-Server General settings
# https://fraunhoferiosb.github.io/FROST-Server/settings/settings.html#general-settings
alwaysOrderbyId: false
maxTop: 10000
defaultTop: 100
defaultCount: false
maxDataSize: "25000000"
logSensitiveData: false
queueLoggingInterval: 0

# FROST-Server MQTT settings
# https://fraunhoferiosb.github.io/FROST-Server/settings/settings.html#mqtt-settings
mqtt:
  # Enable/disable MQTT
  enabled: true
  # MQTT server host
  host: 0.0.0.0
  # -- MQTT QoS
  qos: 2

mqttService:
  # -- Type of service for MQTT
  type: ClusterIP
  # -- Service port for MQTT
  port: 1883

# FROST-Server plugin settings
plugins:
  openApi:
    # -- Enable/disable OpenAPI endpoint, see
    # https://fraunhoferiosb.github.io/FROST-Server/settings/plugins.html
    enable: false

# -- Extra environment variables. Watch out for unquoted strings!
extraEnv: {}

auth:
  # -- FROST-Server Auth settings
  # https://fraunhoferiosb.github.io/FROST-Server/settings/auth.html
  # Enable/disable [FROST-Server Bash Authentication](https://fraunhoferiosb.github.io/FROST-Server/settings/auth.html)
  enabled: false
  # -- The name of the realm that the browser displays when asking for username and password.
  realmName: FROST-Server
  # -- Automatically apply database updates.
  autoUpdateDatabase: true
  # -- f true, anonymous users are allowed to read (GET) data.
  allowAnonymousRead: false
  # -- The java class used to configure authentication/authorisation.
  provider: de.fraunhofer.iosb.ilt.frostserver.auth.basic.BasicAuthProvider
  db:
    driver: org.postgresql.Driver
    host: frostdb
    port: 5432
    dbname: frost
    auth:
      username: postgres
      password: changeMe

startupProbe:
  # -- Enable/disable startup probe
  # [Startup probe](https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes)
  # See the [API reference](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#Probe) for details.
  # Use `startup.probe: {}` to configure
  # [startupProbe probe](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)
  enabled: true
  initialDelaySeconds: 20
  periodSeconds: 5
  timeoutSeconds: 1
  successThreshold: 1
  failureThreshold: 5
  terminationGracePeriodSeconds:
  probe:
    exec:
      command: [ bash, -c, 'curl -f -s --show-error "http://127.0.0.1:8080/FROST-Server/"' ]

livenessProbe:
  # -- Enable/disable liveness probe
  # [Liveness probe](https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes)
  # See the [API reference](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#Probe) for details.
  # Use `livenessProbe.probe: {}` to configure
  # [livenessProbe probe](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)
  enabled: true
  initialDelaySeconds: 10
  periodSeconds: 5
  timeoutSeconds: 1
  successThreshold: 1
  failureThreshold: 20
  terminationGracePeriodSeconds:
  probe:
    exec:
      command: [ bash, -c, 'curl -f -s --show-error "http://127.0.0.1:8080/FROST-Server/"' ]

readinessProbe:
  # -- Enable/disable readiness probe
  # [Readiness probe](https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes)
  # See the [API reference](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#Probe) for details.
  # Use `readinessProbe.probe: {}` to configure
  # [readinessProbe probe](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)
  enabled: true
  initialDelaySeconds: 10
  periodSeconds: 5
  timeoutSeconds: 1
  successThreshold: 1
  failureThreshold: 5
  terminationGracePeriodSeconds:
  probe:
    exec:
      command: [ bash, -c, 'curl -f -s --show-error "http://127.0.0.1:8080/FROST-Server/"' ]

resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 500m
    memory: 512Mi

nodeSelector: {}
tolerations: []
affinity: {}
